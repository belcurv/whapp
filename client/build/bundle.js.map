{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/controller.js","src/js/main.js","src/js/model.js","src/js/service.js","src/js/template.js","src/js/util.js","src/js/view.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* controller.js -- connects our model and view */\n/* jshint esversion:6, devel:true */\n\nexport default class Controller {\n    \n    constructor(model, view) {\n        this.model = model;\n        this.view  = view;\n    }\n    \n    \n    render(data) {\n        this.view.render(data);\n        \n    }\n    \n    \n    setView() {\n        console.log('controller setView fired');\n        this.model.getTeamSkills('T3BC1RPPH')\n            .then( data => this.render(data) );\n    }\n    \n}","/* jshint esversion:6, browser:true */\n\nimport Model      from './model';\nimport { $on }    from './util';\nimport View       from './view';\nimport Controller from './controller';\n\nclass App {\n    \n    constructor() {\n        const model = new Model();\n        const view  = new View();\n        \n        this.controller = new Controller(model, view);\n    }\n    \n}\n\nconst app = new App();\n\nconst setView = () => {\n    app.controller.setView();\n};\n\n$on(window, 'load', setView);\n","/* jshint esversion:6, devel:true */\n/*\n   T3BC1RPPH = chingu central\n   T4ZS2DFAA = chingu rhinos\n   T5518TKBR = extemporaneous\n*/\n\nimport { getJSON } from './service';\nimport { makeFormattedSkillsArr, mapSkillCounts } from './util';\n\nexport default class Model {\n    \n    constructor() {\n        \n    }\n    \n    /* fetch user profiles for a given team ID\n    */\n    getProfiles(team) {\n        return getJSON(`/api/team/${team}`)\n            .then( (profiles) => {\n//                console.log('Profiles from model.js', profiles);\n                return profiles;\n            });\n    }\n    \n    \n    /* fetch team skills*/\n    getTeamSkills(team) {\n        return getJSON(`/api/team/${team}`)\n            .then( (profiles) => {\n                let skillsMap = mapSkillCounts(profiles);\n                return makeFormattedSkillsArr(skillsMap);\n            });\n    }\n    \n}\n","/* jshint esversion:6, devel:true, browser:true */\n\n///* a get JSON function using callbacks\n//*/\n//const getJSON = (url, success, error) => {\n//    const xhr = new XMLHttpRequest();\n//    xhr.onreadystatechange = () => {\n//        if (xhr.readyState === 4) {\n//            if (xhr.status === 200) {\n//                success(JSON.parse(xhr.responseText));\n//            } else {\n//                error(xhr.responseText);\n//            }\n//        }\n//    };\n//    xhr.open('GET', url);\n//    xhr.send();\n//};\n\n\n/* a get JSON function using promises\n*/\nconst getJSON = (url) => {\n    const xhr = new XMLHttpRequest();\n    return new Promise( (resolve, reject) => {\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(JSON.parse(xhr.responseText));\n                } else {\n                    reject(xhr.responseText);\n                }\n            }\n        };\n        xhr.open('GET', url);\n        xhr.send();\n    });\n};\n\n\nexport { getJSON };\n","/* jshint esversion:6, devel:true */\n\n\n/* utility method for easy templating of repeating html elements\n * such as lists.\n *\n * 'tagged template literals' are strings that are first passed\n * through a custom function which returns the processed string.\n *\n * @params  [array]  literal     [array of all the literal secti\n * @params  [array]  ...cooked   [rest param: all the proccessed expressions]\n * @returns [string]             [the processed string]\n */\nconst html = (literalsArr, ...cooked) => {\n    let result = '';\n\n    cooked.forEach((cook, i) => {\n        let lit = literalsArr[i];\n        if (Array.isArray(cook)) {\n            cook = cook.join('');\n        }\n        result += lit;\n        result += cook;\n    });\n    result += literalsArr[literalsArr.length - 1];\n    return result;\n};\n\n\n/* template that returns a 'tr'\n*/\n//const table_row = (profile) => html `\n//    <tr>\n//        <td>${profile.team_domain}</td>\n//        <td>${profile.user_name}</td>\n//        <td>${(profile.timestamp).slice(3,15)}</td>\n//        <td>${profile.skills.length}</td>\n//        <td>${profile.skills.join(', ')}</td>\n//    </tr>\n//`;\nconst table_row = (skill) => html `\n    <tr>\n        <td>${skill.skill}</td>\n        <td>${skill.count}</td>\n    </tr>\n`;\n\n\n/* template that loops over the array of profiles adding a 'tr' for each\n*/\n//const table_template = (data) => html `\n//    <table class=\"table\">\n//        <thead>\n//            <th>Team</th>\n//            <th>Team Member</th>\n//            <th>Last Updated</th>\n//            <th>Total Skills</th>\n//            <th>Skills</th>\n//        </thead>\n//        <tbody>\n//            ${data.map( profile => table_row(profile) )}\n//        </tbody>\n//    </table>\n//`;\nconst table_template = (data) => html `\n    <table class=\"table\">\n        <thead>\n            <th>Skill</th>\n            <th>Count</th>\n        </thead>\n        <tbody>\n            ${data.map( skill => table_row(skill) )}\n        </tbody>\n    </table>\n`;\n\n\n\n\n//console.log(table_template(temp_data));\n\nexport { table_template };\n","/* library of helper functions */\n/* jshint esversion:6 */\n\n/* register handler to an event emitted by a target */\nconst $on = (target, event, handler) => {\n    return target.addEventListener(event, handler);\n};\n\n/* build map of unique skills and counts\n * \n * @params    [array]   profiles   [array of profile objects]\n * @returns   [object]             [map of unique skills and counts]\n*/\nconst mapSkillCounts = (profiles) => {\n    let skillCounts = {};\n    profiles.forEach( profile => {\n        profile.skills.forEach( skill => {\n            if (skillCounts[skill]) {\n                skillCounts[skill] += 1;\n            } else {\n                skillCounts[skill] = 1;\n            }\n        });\n    });\n    return skillCounts;\n};\n\n\n/* build formatted array of skill & count objects\n * \n * @params    [object]   inputObj   [map of unique skills and counts]\n * @returns   [array]               [array of skill & count objects]\n*/\nconst makeFormattedSkillsArr = (inputObj) => {\n    return Object.keys(inputObj).map( key => {\n        return {\n            skill: key,\n            count: inputObj[key]\n        };\n    });\n};\n\n\nexport { $on, mapSkillCounts, makeFormattedSkillsArr };\n","/* view.js\n   handles rendering and DOM events.\n   uses the template strings, feeds them data, and adds their output\n   to the right DOM elements.\n*/\n/* jshint esversion:6, browser: true */\n\nimport { table_template } from './template';\n\nexport default class View {\n    \n    constructor() {\n        this.el = document.getElementById('target');\n    }\n    \n    render(data) {\n        console.log('data from view', data);\n        this.el.innerHTML = table_template(data);\n    }\n    \n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}